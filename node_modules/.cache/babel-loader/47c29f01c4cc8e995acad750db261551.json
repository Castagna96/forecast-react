{"ast":null,"code":"var fs = require('fs'),\n    path = require('path'),\n    FSWatcher = {};\n/**\n * Takes a directory/file and watch for change. Upon change, call the\n * callback.\n *\n * @param {String} name: name of this watcher\n * @param {String} directory: path to the directory to watch\n * @param {String} [filename]: (optional) specific filename to watch for,\n *     watches for all files in the directory if unspecified\n * @param {Integer} cooldownDelay: delay to wait before triggering the callback\n * @param {Function} callback: function () : called when changes are detected\n**/\n\n\nfunction makeFsWatchFilter(name, directory, filename, cooldownDelay, callback) {\n  var cooldownId = null; //Delete the cooldownId and callback the outer function\n\n  function timeoutCallback() {\n    cooldownId = null;\n    callback();\n  } //This function is called when there is a change in the data directory\n  //It sets a timer to wait for the change to be completed\n\n\n  function onWatchEvent(event, changedFile) {\n    // check to make sure changedFile is not null\n    if (!changedFile) {\n      return;\n    }\n\n    var filePath = path.join(directory, changedFile);\n\n    if (!filename || filename === changedFile) {\n      fs.exists(filePath, function onExists(exists) {\n        if (!exists) {\n          // if the changed file no longer exists, it was a deletion.\n          // we ignore deleted files\n          return;\n        } //At this point, a new file system activity has been detected,\n        //We have to wait for file transfert to be finished before moving on.\n        //If a cooldownId already exists, we delete it\n\n\n        if (cooldownId !== null) {\n          clearTimeout(cooldownId);\n          cooldownId = null;\n        } //Once the cooldownDelay has passed, the timeoutCallback function will be called\n\n\n        cooldownId = setTimeout(timeoutCallback, cooldownDelay);\n      });\n    }\n  } //Manage the case where filename is missing (because it's optionnal)\n\n\n  if (typeof cooldownDelay === 'function') {\n    callback = cooldownDelay;\n    cooldownDelay = filename;\n    filename = null;\n  }\n\n  if (FSWatcher[name]) {\n    stopWatching(name);\n  }\n\n  FSWatcher[name] = fs.watch(directory, onWatchEvent);\n}\n/**\n * Take a FSWatcher object and close it.\n *\n * @param {string} name: name of the watcher to close\n *\n**/\n\n\nfunction stopWatching(name) {\n  FSWatcher[name].close();\n}\n\nmodule.exports.makeFsWatchFilter = makeFsWatchFilter;\nmodule.exports.stopWatching = stopWatching;","map":{"version":3,"names":["fs","require","path","FSWatcher","makeFsWatchFilter","name","directory","filename","cooldownDelay","callback","cooldownId","timeoutCallback","onWatchEvent","event","changedFile","filePath","join","exists","onExists","clearTimeout","setTimeout","stopWatching","watch","close","module","exports"],"sources":["C:/Users/franc/Documents/React/wearther/node_modules/geoip-lite/lib/fsWatcher.js"],"sourcesContent":["var fs = require('fs'),\n\tpath = require('path'),\n\tFSWatcher = {};\n\n/**\n * Takes a directory/file and watch for change. Upon change, call the\n * callback.\n *\n * @param {String} name: name of this watcher\n * @param {String} directory: path to the directory to watch\n * @param {String} [filename]: (optional) specific filename to watch for,\n *     watches for all files in the directory if unspecified\n * @param {Integer} cooldownDelay: delay to wait before triggering the callback\n * @param {Function} callback: function () : called when changes are detected\n**/\nfunction makeFsWatchFilter(name, directory, filename, cooldownDelay, callback) {\n\tvar cooldownId = null;\n\n\t//Delete the cooldownId and callback the outer function\n\tfunction timeoutCallback() {\n\t\tcooldownId = null;\n\t\tcallback();\n\t}\n\n\t//This function is called when there is a change in the data directory\n\t//It sets a timer to wait for the change to be completed\n\tfunction onWatchEvent(event, changedFile) {\n\t\t// check to make sure changedFile is not null\n\t\tif (!changedFile) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar filePath = path.join(directory, changedFile);\n\n\t\tif (!filename || filename === changedFile) {\n\t\t\tfs.exists(filePath, function onExists(exists) {\n\t\t\t\tif (!exists) {\n\t\t\t\t\t// if the changed file no longer exists, it was a deletion.\n\t\t\t\t\t// we ignore deleted files\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//At this point, a new file system activity has been detected,\n\t\t\t\t//We have to wait for file transfert to be finished before moving on.\n\n\t\t\t\t//If a cooldownId already exists, we delete it\n\t\t\t\tif (cooldownId !== null) {\n\t\t\t\t\tclearTimeout(cooldownId);\n\t\t\t\t\tcooldownId = null;\n\t\t\t\t}\n\n\t\t\t\t//Once the cooldownDelay has passed, the timeoutCallback function will be called\n\t\t\t\tcooldownId = setTimeout(timeoutCallback, cooldownDelay);\n\t\t\t});\n\t\t}\n\t}\n\n\t//Manage the case where filename is missing (because it's optionnal)\n\tif (typeof cooldownDelay === 'function') {\n\t\tcallback = cooldownDelay;\n\t\tcooldownDelay = filename;\n\t\tfilename = null;\n\t}\n\n\tif (FSWatcher[name]) {\n\t\tstopWatching(name);\n\t}\n\n\tFSWatcher[name] = fs.watch(directory, onWatchEvent);\n}\n\n/**\n * Take a FSWatcher object and close it.\n *\n * @param {string} name: name of the watcher to close\n *\n**/\nfunction stopWatching(name) {\n\tFSWatcher[name].close();\n}\n\nmodule.exports.makeFsWatchFilter = makeFsWatchFilter;\nmodule.exports.stopWatching = stopWatching;\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AAAA,IACCC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADf;AAAA,IAECE,SAAS,GAAG,EAFb;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,QAA5C,EAAsDC,aAAtD,EAAqEC,QAArE,EAA+E;EAC9E,IAAIC,UAAU,GAAG,IAAjB,CAD8E,CAG9E;;EACA,SAASC,eAAT,GAA2B;IAC1BD,UAAU,GAAG,IAAb;IACAD,QAAQ;EACR,CAP6E,CAS9E;EACA;;;EACA,SAASG,YAAT,CAAsBC,KAAtB,EAA6BC,WAA7B,EAA0C;IACzC;IACA,IAAI,CAACA,WAAL,EAAkB;MACjB;IACA;;IAED,IAAIC,QAAQ,GAAGb,IAAI,CAACc,IAAL,CAAUV,SAAV,EAAqBQ,WAArB,CAAf;;IAEA,IAAI,CAACP,QAAD,IAAaA,QAAQ,KAAKO,WAA9B,EAA2C;MAC1Cd,EAAE,CAACiB,MAAH,CAAUF,QAAV,EAAoB,SAASG,QAAT,CAAkBD,MAAlB,EAA0B;QAC7C,IAAI,CAACA,MAAL,EAAa;UACZ;UACA;UACA;QACA,CAL4C,CAO7C;QACA;QAEA;;;QACA,IAAIP,UAAU,KAAK,IAAnB,EAAyB;UACxBS,YAAY,CAACT,UAAD,CAAZ;UACAA,UAAU,GAAG,IAAb;QACA,CAd4C,CAgB7C;;;QACAA,UAAU,GAAGU,UAAU,CAACT,eAAD,EAAkBH,aAAlB,CAAvB;MACA,CAlBD;IAmBA;EACD,CAxC6E,CA0C9E;;;EACA,IAAI,OAAOA,aAAP,KAAyB,UAA7B,EAAyC;IACxCC,QAAQ,GAAGD,aAAX;IACAA,aAAa,GAAGD,QAAhB;IACAA,QAAQ,GAAG,IAAX;EACA;;EAED,IAAIJ,SAAS,CAACE,IAAD,CAAb,EAAqB;IACpBgB,YAAY,CAAChB,IAAD,CAAZ;EACA;;EAEDF,SAAS,CAACE,IAAD,CAAT,GAAkBL,EAAE,CAACsB,KAAH,CAAShB,SAAT,EAAoBM,YAApB,CAAlB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,YAAT,CAAsBhB,IAAtB,EAA4B;EAC3BF,SAAS,CAACE,IAAD,CAAT,CAAgBkB,KAAhB;AACA;;AAEDC,MAAM,CAACC,OAAP,CAAerB,iBAAf,GAAmCA,iBAAnC;AACAoB,MAAM,CAACC,OAAP,CAAeJ,YAAf,GAA8BA,YAA9B"},"metadata":{},"sourceType":"script"}